{
    "model": {
        "deformation": {
            "compute_similarity_measure_at_low_res": "to compute Sim at lower resolution"
        },
        "registration_model": {
            "env": {
                "__doc__": "env settings, typically are specificed by the external package, including the mode for solver or for smoother",
                "get_momentum_from_external_network": "use external network to predict momentum, notice that the momentum network is not built in this package",
                "reg_factor": "regularzation factor",
                "use_ode_tuple": "once use torchdiffeq package, take the tuple input or tensor input",
                "use_odeint": "using torchdiffeq package as the ode solver"
            },
            "forward_model": {
                "smoother": {
                    "multi_gaussian_stds": "std deviations for the Gaussians",
                    "multi_gaussian_weights": "weights for the multiple Gaussians",
                    "type": "type of smoother (diffusion|gaussian|adaptive_gaussian|multiGaussian|adaptive_multiGaussian|gaussianSpatial|adaptiveNet)"
                }
            },
            "loss": {
                "__doc__": "settings for the loss function",
                "display_max_displacement": "displays the current maximal displacement",
                "limit_displacement": "[True/False] if set to true limits the maximal displacement based on the max_displacement_setting",
                "max_displacement": "Max displacement penalty added to loss function of limit_displacement set to True"
            },
            "shooting_vector_momentum": {
                "__doc__": "settings for shooting vector momentum methods",
                "use_velocity_mask_on_boundary": "a mask to force boundary velocity be zero, the value of the mask is from 0-1"
            },
            "similarity_measure": {},
            "spline_order": "Spline interpolation order; 1 is linear interpolation (default); 3 is cubic spline",
            "type": "Name of the registration model",
            "use_CFL_clamping": "If the model uses time integration, CFL clamping is used"
        }
    }
}